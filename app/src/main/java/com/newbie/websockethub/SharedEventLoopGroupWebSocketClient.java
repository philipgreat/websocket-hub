/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.newbie.websockethub;

import io.netty.bootstrap.Bootstrap;
import io.netty.channel.*;
import io.netty.channel.nio.NioEventLoopGroup;
import io.netty.channel.socket.nio.NioSocketChannel;
import io.netty.handler.codec.http.HttpClientCodec;
import io.netty.handler.codec.http.HttpObjectAggregator;
import io.netty.handler.codec.http.websocketx.WebSocketClientProtocolHandler;
import io.netty.handler.codec.http.websocketx.WebSocketVersion;
import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;
import java.net.URI;

public class SharedEventLoopGroupWebSocketClient {

    private static final EventLoopGroup group = new NioEventLoopGroup();

    public static void main(String[] args) throws Exception {
        URI uri1 = new URI("ws://iotlog.doublechaintech.com:80/message-center/public");
        URI uri2 = new URI("ws://iotlog.doublechaintech.com:80/message-center/public");

        // 使用相同的EventLoopGroup连接到不同的服务器
        connectToWebSocket(uri1, group);
        connectToWebSocket(uri2, group);

        // 添加一个钩子以在JVM关闭时优雅地关闭EventLoopGroup
        Runtime.getRuntime().addShutdownHook(new Thread(() -> {
            group.shutdownGracefully();
        }));
    }

    private static void connectToWebSocket(URI uri, EventLoopGroup sharedGroup) throws InterruptedException {
        Bootstrap bootstrap = new Bootstrap();
        bootstrap.group(sharedGroup)
                .channel(NioSocketChannel.class)
                .handler(new ChannelInitializer<Channel>() {
                    @Override
                    protected void initChannel(Channel ch) throws Exception {
                        ChannelPipeline pipeline = ch.pipeline();
                        pipeline.addLast(new HttpClientCodec(),
                                new HttpObjectAggregator(8192),
                                new WebSocketClientProtocolHandler(uri, WebSocketVersion.V13, null, false, null, 65536),
                                new SimpleChannelInboundHandler<TextWebSocketFrame>() {
                                    @Override
                                    protected void channelRead0(ChannelHandlerContext ctx, TextWebSocketFrame frame) throws Exception {
                                        System.out.println("Received message from " + uri + ": " + frame.text());
                                    }
                                });
                    }
                });

        Channel channel = bootstrap.connect(uri.getHost(), uri.getPort()).sync().channel();
        //channel.writeAndFlush(new TextWebSocketFrame("Hello, WebSocket"));
        // 不要在这里关闭Future，因为我们想要保持连接开放
        //channel.closeFuture().await();
    }
}